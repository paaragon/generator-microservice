import config from 'config';
import cors from 'cors';
import express from 'express';
import httpContext from 'express-http-context';
import customExpress, { CustomExpress } from '../lib/customExpress/customExpress';
import { logger } from '../logger/logger';
import { ConfigApiI } from '../config';
import accessLogger from './mdw/accessLogger';
import errorHandler from './mdw/errorHandler';
import requestUuid from './mdw/requestUuid';
import healthRoutes from './routes/health.routes';
<% for (const ctrlName of Object.keys(controllers)) { %>import <%= ctrlName %>Routes from './routes/<%= ctrlName %>.routes';
<% } %>

const log = logger.child({ name: 'server.ts' });

export default class Server {
    private app: CustomExpress;

    constructor(
        public port: number,
    ) {
        const customExpressLog = log.child({ name: 'customExpress' });
        this.app = customExpress({
            log: customExpressLog.info.bind(customExpressLog),
        });

        this.app.use(cors({
            origin: true,
            credentials: true
        }));
        this.app.use(express.json());
        this.app.use(httpContext.middleware);
        this.app.use(requestUuid);
        this.app.use(accessLogger);
        this.initRoutes();
        this.app.use(errorHandler);
    }

    private initRoutes() {
        this.app.use(`/health`, healthRoutes);
        <% for (const ctrlName of Object.keys(controllers)) { %>
        this.app.use(`/api/v${config.get<ConfigApiI>('api').version}<%= ctrlName === 'root' ? '' : '/' + ctrlName %>`, <%= ctrlName %>Routes);<% } %>
    }

    async start() {
        return new Promise<void>((res, rej) => {
            this.app.listen(this.port, () => {
                this.app.printEndpoints();
                log.info(`Server is listening on port ${this.port}`);
                res();
            });
        });
    }
}